let targetX, targetY;
let targetSize = 50;
let gameStarted = false;
let gameTime;
let timeLeft;
let score = 0;
let timerFontSize = 32;
let scoreFontSize = 24;
let particles = [];
let maxParticles = 50;
let lastScores = [];

function setup() {
  createCanvas(800, 600);
  textAlign(CENTER, CENTER);
  textSize(timerFontSize);
  generateTarget();
}

function draw() {
  background(51);

  if (!gameStarted) {
    fill(255);
    textSize(36);
    text('Mouse Aim Trainer', width / 2, height / 4);
    textSize(24);
    text('Click anywhere to start', width / 2, height / 4 + 40);
  } else {
    timeLeft = max(0, 30 - Math.floor((millis() - gameTime) / 1000));

    if (timeLeft > 0) {
      fill(255);
      stroke(0);
      strokeWeight(2);
      ellipse(targetX, targetY, targetSize, targetSize);

      fill(255);
      noStroke();
      textSize(timerFontSize);
      text('Time: ' + timeLeft, width / 2, 40);
      
      textSize(scoreFontSize);
      text('Score: ' + score, width / 2, 70);
      
      // Draw crosshair
      stroke(255, 0, 0);
      strokeWeight(1);
      line(mouseX - 10, mouseY, mouseX + 10, mouseY);
      line(mouseX, mouseY - 10, mouseX, mouseY + 10);

      // Update and display particles
      for (let i = particles.length - 1; i >= 0; i--) {
        particles[i].update();
        particles[i].display();

        if (particles[i].isFinished()) {
          particles.splice(i, 1);
        }
      }

    } else {
      fill(255);
      textSize(36);
      text('Game Over', width / 2, height / 4);
      textSize(24);
      text('Score: ' + score, width / 2, height / 4 + 40);
      text('Click anywhere to restart', width / 2, height / 4 + 80);
      gameStarted = false;
    }
  }
}

function generateTarget() {
  targetX = random(targetSize / 2, width - targetSize / 2);
  targetY = random(targetSize / 2, height - targetSize / 2);
}

function mouseClicked() {
  if (!gameStarted) {
    gameStarted = true;
    gameTime = millis();
    score = 0;
  } else {
    let distance = dist(mouseX, mouseY, targetX, targetY);
    if (distance < targetSize / 2) {
      score++;
      explode(targetX, targetY);
      generateTarget();
    }
  }
}

function mouseMoved() {
  if (gameStarted && timeLeft > 0) {
    cursor('none');
  } else {
    cursor('default');
  }
}

function explode(x, y) {
  for (let i = 0; i < maxParticles; i++) {
    let p = new Particle(x, y);
    particles.push(p);
  }
}

function gameOver() {
  lastScores.push(score);
  if (lastScores.length > 5) {
    lastScores.shift();
  }
  console.log('Last 5 scores: ' + lastScores.join(', '));
}

class Particle {
  constructor(x, y) {
    this.pos = createVector(x, y);
    this.vel = p5.Vector.random2D().mult(random(1, 5));
    this.acc = createVector(0, 0);
    this.lifespan = 255;
    this.size = random(2, 6);
  }

  applyForce(force) {
    this.acc.add(force);
  }

  update() {
    this.vel.add(this.acc);
    this.pos.add(this.vel);
    this.acc.mult(0);
    this.lifespan -= 5;
  }

  display() {
    fill(255, this.lifespan);
    noStroke();
    ellipse(this.pos.x, this.pos.y, this.size);
  }

  isFinished() {
    return this.lifespan < 0;
  }
}
